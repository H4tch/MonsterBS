## Generated by https://www.github.com/h4tch/CppProjectBuilder
## MIT Licensed 2014. Created by Dan Hatch.
##
## Cross-Platform Makefile for Unix host.
## Generated for '$$NAME.mk'.
##
## Cross-Compilation Environment Variables Support:
## 	OS: Windows_NT, Windows, Linux (unix), and Darwin (osx).
## 	ARCH: x86, x86_64, arm(not implemented).
## 	Note, these will be set to match the host machine if not set.
##
## Make Commands:
## 	debug - Default. Builds a debug version for the current OS and ARCH.
## 	release - Builds a release version for the current OS and ARCH.
##	package - Creates a Zip archive in the build directory of all compiled
##				release executables, data assets, and libraries.
##				Note: Removes debug build files.
##	clean - Remove all builds for current OS and ARCH. 
##	cleanDebug - Remove debug build files.
##	distclean - Remove the build directory completely.
##	docs - Generate documentation of your source code.
##	project - Re-generates project files based $$NAME.mk's variables.
##

  
## TODO:
## http://www.gnu.org/software/make/manual/make.html#Directory-Variables
##	DESTDIR
## 	make dist
## 	make install, prefix, exec-prefix, /usr/local
## 	make uninstall
##	datarootdir, /usr/local/share, architecture independent data
##	datadir, typically same as datarootdir
## 	includedir,	/usr/local/include/ where to install header files 
## 	Ability for user to override variables.
##	Metadata for built packages. Include $$ICON
##	Look into NSIS for a Windows installer. 
##	Add optimization options to compiler for "release" builds.
##	Change OS and ARCH to produce more "friendly" named files?
##		Something like this: game_Linux_32, game_Windows_64, game_Mac_32
## 		Arm would be "_arm32" and "_arm64", not counting the different ABIs.
##	More Platforms: x64, ia32, etc?
##	Basic Test suite.
##		`make test`
##		`make testrun`
##	ERROR out if ARCH is invalid. For OS, default to Linux? Add Unix?
## 	Make the Zip file(s) a target. Each platform has a zip target.
##		The zip needs build/$(SYSTEM).release as a dependency. 
##	Move compiled Linux binary to bin/lib folder.


include $$NAME.mk
export

WORKINGDIR := $(PWD)

BIN = $(FILENAME)
PACKAGEDIR = $(BUILDDIR)/$(NAME)_$(VERSION)
DEFINES += -DCOMPILE_DATE=$$DATE


SHELL = /bin/sh
INSTALL = install
INSTALL_PROGRAM = INSTALL
INSTALL_DATA = $(INSTALL) -m 644
DESTDIR = /usr/share/


#TODO INTEGRATE THIS.
include $(SCRIPTDIR)/.platform.mk
export

ifneq ($(filter release, $(MAKECMDGOALS)),)
	OUTPUT = $(BUILDDIR)/$(BIN)_$(SYSTEM)$(EXT)
	OUTPUTDIR = $(BUILDDIR)/$(SYSTEM)
else
	OUTPUT = $(BUILDDIR)/$(BIN)_$(SYSTEM).debug$(EXT)
	OUTPUTDIR = $(BUILDDIR)/$(SYSTEM).debug
endif


define SETUP
ifneq ($(filter release, $(MAKECMDGOALS)),)
	$(call RELEASE_PROFILE)
else
	$(call DEBUG_PROFILE)
endif

ifeq ($(OS),Windows)
	$(call WINDOWS_PROFILE)
else ifeq ($(OS), Mac)
	$(call MAC_PROFILE)
else #ifeq ($(OS),Linux)
	$(call LINUX_PROFILE)
endif

ifeq ($(ARCH), x86)
	$(call X86_PROFILE)
else ifeq ($(ARCH), x86_64)
	$(call X86_64_PROFILE)
endif
endef #SETUP


VPATH += $(SRCDIR)

OBJECTS	:= $(patsubst $(SRCDIR)/%.cpp,$(OUTPUTDIR)/%.o,$(SOURCES))

DEPENDENCIES = $(OBJECTS:.o=.deps)

all: init $(OUTPUT)

$(OUTPUT): $(OBJECTS)
	$(CXX) $(STATICLIBS) $(LDFLAGS) $(OBJECTS) -o $(OUTPUT) $(LIBS)
	cp $(OUTPUT) $(BIN)$(EXT)

debug: all

release: all

init:
	$(eval $(call SETUP))
	@mkdir -p $(OUTPUTDIR)
	@for SOURCE in $(SOURCES); do \
		export SRCSUBDIR=`find $$SOURCE -printf '%h\n'`; \
		mkdir -p $(OUTPUTDIR)/$$SRCSUBDIR; \
	done
	@if [ "$(SRCDIR)" != "." ]; then \
		cp -a $(OUTPUTDIR)/$(SRCDIR)/* $(OUTPUTDIR)/; \
		rm -rd $(OUTPUTDIR)/$(SRCDIR); \
	fi

# Put init/PRECHECK here.
$(OBJECTS) : $(OUTPUTDIR)/%.o: $(SRCDIR)/%.cpp
	$(CXX) $(CXXFLAGS) $(DEFINES) $< -o $@ $(INCLUDES)

-include $(DEPENDENCIES)

# TODO: CXXFLAGS (can't since it has the '-c' compiler option?)
$(DEPENDENCIES): $(OUTPUTDIR)/%.deps: $(SRCDIR)/%.cpp
	@cd $(SRCDIR); export SRCSUBDIR=`find $*.cpp -printf '%h\n'`; cd $(WORKINGDIR); \
	mkdir -p $(OUTPUTDIR)/$$SRCSUBDIR;
	@export SOURCENAME=`find $< -printf '%f\n' | sed -e 's/.cpp//g'`; \
	$(CXX) -std=c++11 -MM -MG $(DEFINES) $< | \
	sed -e "s@$$SOURCENAME.o:@$(OUTPUTDIR)/$*.o $(OUTPUTDIR)/$*.deps:@g" > $@

shared: $(OBJECTS)
	$(CXX) $(LDFLAGS) $(LIBFLAGS) -o lib$(NAME)$(LIBEXT) $(OBJECTS)

static: $(OBJECTS)
	if [ $(OS) = "Linux" ] || [ $(OS) = "Mac" ]; then LIBEXT=".a"; fi; \
	$(AR) rcs lib$(NAME)$$LIBEXT $(OBJECTS)


dist: package

package: cleanDebug
	mkdir -p $(PACKAGEDIR)/$(LIBDIR)/
	-@cp -a $(DATADIR) $(PACKAGEDIR)/
	cp -a $(LIBDIR)/* $(PACKAGEDIR)/$(LIBDIR)/
	# For each compiled binary, copy it into the package.
	@for binary in $(shell find $(BUILDDIR) -maxdepth 1 -type f -printf '%f\n'); do \
		echo $$binary | grep Windows; \
		# If it is a Windows binary, copy it into the Windows bin folder. \
		if [ $$? -eq 0 ]; then \
			# Strip the bin name, extension, and build path from the binary. \
			export DEST=`echo $$binary | sed s/$(BIN)_//g | sed s/.exe//g`; \
			cp $(BUILDDIR)/$$binary $(PACKAGEDIR)/$(LIBDIR)/$$DEST/$(BIN).exe; \
			cp $(SCRIPTDIR)/LaunchOnWindows.bat $(PACKAGEDIR)/$(BIN).bat; \
		else \
			cp $(BUILDDIR)/$$binary $(PACKAGEDIR)/; \
			cp $(SCRIPTDIR)/LaunchOnLinux.sh $(PACKAGEDIR)/$(BIN).sh; \
		fi; \
	done
	-@rm $(NAME)_$(VERSION).zip
	-cd $(BUILDDIR)/ && \
	zip -r ../$(NAME)_$(VERSION).zip $(NAME)_$(VERSION)/;



clean:
	-@rm -rf $(BUILDDIR)/$(SYSTEM).debug/ > /dev/null 2>&1
	-@rm $(BUILDDIR)/$(BIN)_$(SYSTEM).debug$(EXT) > /dev/null 2>&1
	-@rm -rf $(BUILDDIR)/$(SYSTEM).release/ > /dev/null 2>&1
	-@rm $(BUILDDIR)/$(BIN)_$(SYSTEM)$(EXT) > /dev/null 2>&1
	-@rmdir $(BUILDDIR)/ > /dev/null 2>&1

cleanDebug:
	-@rm -rf $(BUILDDIR)/*.debug
	-@rm $(BUILDDIR)/*.debug*

distclean:
	-@rm -r $(BUILDDIR) > /dev/null 2>&1

docs:
	mkdir -p $(DOCDIR)
	(cat Doxyfile ; echo INPUT="$$PWD/$(SRCDIR)") | doxygen -

project:
	@$(MAKE) -f $(SCRIPTDIR)/CppProjectBuilder/Makefile $(NAME)



.PHONY: all debug release shared static package dist install uninstall \
		init clean distclean cleanAll docs project


