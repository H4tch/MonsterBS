## 		Generated by the Monster Build System
## 		https://www.github.com/h4tch/MonsterBS
## 		MIT Licensed 2014. Created by Dan Hatch.
##
## Cross-Platform Makefile generated from '$$NAME.mk' project file.
##
## Cross-Compilation environment variables supported:
## 	OS: Windows, Linux (unix), and Darwin (osx). Defaults to HOST_OS.
## 	ARCH: x86, x86_64, arm(not implemented). Defaults to HOST_ARCH.
##
## Makefile targets:
## 	debug - Default. Builds a debug version for the current OS and ARCH.
## 	release - Builds a release version for the current OS and ARCH.
##	test - Compiles the test suite.
##	package - Creates a Zip archive in the build directory of all compiled
##				release executables, data assets, and libraries.
##				Note: Removes debug build files.
##	clean - Remove all builds for current OS and ARCH. 
##	cleanDebug - Remove debug build files.
##	distclean - Remove the build directory completely.
##	docs - Generate documentation of your source code.
##	project - Re-generates project files based $$NAME.mk's variables.
##

include $$NAME.mk
export

WORKINGDIR := $(PWD)

BIN = $(FILENAME)
PACKAGEDIR = $(BUILDDIR)/$(NAME)_$(VERSION)
DEFINES += -DCOMPILE_DATE=$$DATE


SYSTEM = $(OS)_$(ARCH)

#### SET UP OS AND ARCH ####
ifeq ($(PROCESSOR_ARCHITECTURE),)
	HOST_OS = $(shell uname -s)
	HOST_ARCH = $(shell uname -m)
else
	# NOTE: WINDOWS ARCH VALUES CAN BE: AMD64 IA64 x86
	ifneq ($(PROCESSOR_ARCHITEW6432),)
		PROCESSOR_ARCHITECTURE = $(PROCESSOR_ARCHITEW6432)
	endif
	HOST_OS = Windows
	HOST_ARCH := PROCESSOR_ARCHITECTURE
	ifeq ($(HOST_ARCH),IA64)
		HOST_ARCH := x86_64
	else ifeq ($(HOST_ARCH),AMD64)
		HOST_ARCH := x86_64
	endif
	ifeq ($(OS),Windows_NT)
		OS := Windows
	endif
endif

ifeq ($(OS),)
	OS := $(HOST_OS)
endif

ifeq ($(OS), Windows)
else ifeq ($(OS), Darwin)
	OS = Mac
else # Unix
	OS = Linux
endif

ifeq ($(ARCH),)
	ARCH := $(HOST_ARCH)
endif

# If not on Windows use `filter` command.
ifneq ($(HOST_OS),Windows)
	ifneq ($(filter %64%,$(ARCH)),)
		ARCH := x86_64
	else ifneq ($(filter %32,$(ARCH)),)
		ARCH := x86
	else ifneq ($(filter %86,$(ARCH)),)
		ARCH := x86
	else ifneq ($(filter %arm,$(ARCH)),)
		ARCH := arm
	else ifneq ($(filter arm%,$(ARCH)),)
		ARCH := arm
	else ifneq ($(filter %ARM,$(ARCH)),)
		ARCH := arm
	else ifneq ($(filter ARM%,$(ARCH)),)
		ARCH := arm
	endif
endif
# x64, ia32, etc?
ifeq ($(ARCH),AMD64)
	ARCH := x86_64
else ifeq ($(ARCH),IA64)
	ARCH := x86_64
endif
# ERROR out if ARCH is invalid.
#### DONE SETTING UP OS AND ARCH ####



# Build TEST sources.
ifneq ($(filter test, $(MAKECMDGOALS)),)
	SOURCES := $(shell find $(TESTDIR) -type f -name "*.cpp") $(SOURCES)
endif


# RELEASE and DEBUG build output.
ifneq ($(filter release, $(MAKECMDGOALS)),)
	APPEND:=$(APPEND)
else
	APPEND:=$(APPEND).debug
endif

OUTPUT = $(BUILDDIR)/$(BIN)_$(SYSTEM)$(APPEND)$(EXT)
OUTPUTDIR = $(BUILDDIR)/$(SYSTEM)$(APPEND)
LIBOUTPUT = lib$(NAME)$(APPEND)
LIBOUTPUTDIR = $(BUILDDIR)/$(LIBDIR)/$(SYSTEM)/


define SETUP
ifneq ($(filter release, $(MAKECMDGOALS)),)
	$(call RELEASE_PROFILE)
else
	$(call DEBUG_PROFILE)
endif

ifeq ($(OS),Windows)
	$(call WINDOWS_PROFILE)
else ifeq ($(OS), Mac)
	$(call MAC_PROFILE)
else #ifeq ($(OS),Linux)
	$(call LINUX_PROFILE)
endif

ifeq ($(ARCH), x86)
	$(call X86_PROFILE)
else ifeq ($(ARCH), x86_64)
	$(call X86_64_PROFILE)
endif
endef #SETUP



OBJECTS	:= $(patsubst %.cpp,$(OUTPUTDIR)/%.o,$(SOURCES))

DEPENDENCIES = $(OBJECTS:.o=.deps)

all: $$DEFAULT_BUILD_RULE

$(OUTPUT): $(OBJECTS)
	$(CXX) $(STATICLIBS) $(LDFLAGS) $(OBJECTS) -o $(OUTPUT) $(LIBS)
	cp $(OUTPUT) $(BIN)$(EXT)

debug: all

release: all

test: init $(OUTPUT)

init:
	$(eval $(call SETUP))
	@mkdir -p $(OUTPUTDIR)
	@for SOURCE in $(SOURCES); do \
		export SRCSUBDIR=`find $$SOURCE -printf '%h\n'`; \
		mkdir -p $(OUTPUTDIR)/$$SRCSUBDIR; \
	done
	@if [ "$(SRCDIR)" != "." ]; then \
		cp -a $(OUTPUTDIR)/$(SRCDIR)/* $(OUTPUTDIR)/; \
		rm -rd $(OUTPUTDIR)/$(SRCDIR); \
	fi

$(OBJECTS): $(OUTPUTDIR)/%.o: %.cpp
	$(CXX) $(CXXFLAGS) $(DEFINES) $< -o $@ $(INCLUDES)

-include $(DEPENDENCIES)

$(DEPENDENCIES): $(OUTPUTDIR)/%.deps: %.cpp
	@export SRCSUBDIR=`find $*.cpp -printf '%h\n'`; \
	mkdir -p $(OUTPUTDIR)/$$SRCSUBDIR;
	@export SOURCENAME=`find $< -printf '%f\n' | sed -e 's/.cpp//g'`; \
	$(CXX) -std=c++11 -MM -MG $(DEFINES) $< | \
	sed -e "s@$$SOURCENAME.o:@$(OUTPUTDIR)/$*.o $(OUTPUTDIR)/$*.deps:@g" > $@

shared: init $(OBJECTS)
	mkdir -p $(LIBOUTPUTDIR)
	$(CXX) $(LDFLAGS) $(LIBFLAGS) -o $(LIBOUTPUTDIR)/$(LIBOUTPUT)$(LIBEXT) $(OBJECTS)
	cp $(LIBOUTPUTDIR)/$(LIBOUTPUT)$(LIBEXT) lib$(NAME)$(LIBEXT)

static: init $(OBJECTS)
	mkdir -p $(LIBOUTPUTDIR)
	$(AR) rcs $(LIBOUTPUTDIR)/$(LIBOUTPUT)$(LIBEXTSTATIC) $(OBJECTS)
	cp $(LIBOUTPUTDIR)/$(LIBOUTPUT)$(LIBEXTSTATIC) lib$(NAME)$(LIBEXTSTATIC)

dist: package

package: cleanDebug
	mkdir -p $(PACKAGEDIR)/$(LIBDIR)/
	-@cp -a $(DATADIR) $(PACKAGEDIR)/
	cp -a $(LIBDIR)/* $(PACKAGEDIR)/$(LIBDIR)/
	# For each compiled binary, copy it into the package.
	@for binary in $(shell find $(BUILDDIR) -maxdepth 1 -type f -printf '%f\n'); do \
		echo $$binary | grep Windows; \
		# If it is a Windows binary, copy it into the Windows bin folder. \
		if [ $$? -eq 0 ]; then \
			# Strip the bin name, extension, and build path from the binary. \
			export DEST=`echo $$binary | sed s/$(BIN)_//g | sed s/.exe//g`; \
			cp $(BUILDDIR)/$$binary $(PACKAGEDIR)/$(LIBDIR)/$$DEST/$(BIN).exe; \
			cp $(SCRIPTDIR)/LaunchOnWindows.bat $(PACKAGEDIR)/$(BIN).bat; \
		else \
			cp $(BUILDDIR)/$$binary $(PACKAGEDIR)/; \
			cp $(SCRIPTDIR)/LaunchOnLinux.sh $(PACKAGEDIR)/$(BIN).sh; \
		fi; \
	done
	-@rm $(NAME)_$(VERSION).zip
	-cd $(BUILDDIR)/ && \
	zip -r ../$(NAME)_$(VERSION).zip $(NAME)_$(VERSION)/;


clean:
	-@rm -rf $(BUILDDIR)/$(SYSTEM).debug/ > /dev/null 2>&1
	-@rm $(BUILDDIR)/$(BIN)_$(SYSTEM).debug$(EXT) > /dev/null 2>&1
	-@rm -rf $(BUILDDIR)/$(SYSTEM).release/ > /dev/null 2>&1
	-@rm $(BUILDDIR)/$(BIN)_$(SYSTEM)$(EXT) > /dev/null 2>&1
	-@rmdir $(BUILDDIR)/ > /dev/null 2>&1

cleanDebug:
	-@rm -rf $(BUILDDIR)/*.debug
	-@rm $(BUILDDIR)/*.debug*

distclean:
	-@rm -r $(BUILDDIR) > /dev/null 2>&1

docs:
	mkdir -p $(DOCDIR)
	(cat Doxyfile ; echo INPUT="$$PWD/$(SRCDIR)") | doxygen -

project:
	@$(MAKE) -f $(SCRIPTDIR)/MonsterBS/Makefile $(NAME)


.PHONY: all debug release shared static package dist install uninstall \
		init clean distclean cleanAll docs project

