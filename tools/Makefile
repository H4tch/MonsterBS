## Generated by https://www.github.com/h4tch/CppProjectBuilder
## MIT Licensed. Created by Dan H4tch.
##
## Cross-Platform Makefile for Mac/Linux.
## 
## Cross-Compilation Support:
## 	Supported OS values are: Windows_NT, Windows, Linux, and Darwin (osx).
## 	Supported ARCH values are: x86, x86_64, arm(not implemented).
## 	Note: These will be automatically determined if not set.
## 
## Make Commands:
## 	make - Builds a debug version for the current OS and ARCH.
## 	make debug - same as above.
## 	make release - Builds a release version for the current OS and ARCH.
##	make package - Creates a Zip archive in the build direction of all compiled
##					executables, data assets, and libraries.
##					Note: Removes debug build files.
##	make clean - Remove debug and release builds for current OS and ARCH. 
##	make cleanDebug - Remove debug build files.
##	make cleanAll - Remove the build directory completely.
##	make docs - Generate documentation of your source code.
##	make project - Re-generates project files based $$NAME.mk's variables.
##	

  
## TODO:
## 	Move OS and ARCH detection to another Makefile that is included.
## http://www.gnu.org/software/make/manual/make.html#Directory-Variables
##	DESTDIR
## 	make dist
## 	make install, prefix, exec-prefix, /usr/local
## 	make uninstall
##	datarootdir, /usr/local/share, architecture independent data
##	datadir, typically same as datarootdir
## 	includedir,	/usr/local/include/ where to install header files 
## 	Ability for user to override variables.
##	Metadata for built packages. Include $$ICON
##	Look into NSIS for a Windows installer. 
##	Add optimization options to compiler for "release" builds.
##	Change OS and ARCH to produce more "friendly" named files?
##		Something like this: game_Linux_32, game_Windows_64, game_Mac_32
## 		Arm would be "_arm32" and "_arm64", not counting the different ABIs.
##	More Platforms: x64, ia32, etc?
##	Basic Test suite.
##		`make test`
##		`make testrun`
##	ERROR out if ARCH is invalid. For OS, default to Linux? Add Unix?
## 	Make the Zip file(s) a target. Each platform has a zip target.
##		The zip needs build/$(SYSTEM).release as a dependency. 
##	Move compiled Linux binary to bin/lib folder.


include $$NAME.mk
export

BIN = $(FILENAME)
PACKAGEDIR = $(BUILDDIR)/$(NAME)_$(VERSION)
DEFINES += -DCOMPILE_DATE=$$DATE


# TODO
SHELL = /bin/sh
INSTALL = install
INSTALL_PROGRAM=INSTALL
INSTALL_DATA = $(INSTALL) -m 644
# install and uninstall rules
DESTDIR = /usr/share/


include $(SCRIPTDIR)/platform.mk
export

## DEBUG AND RELEASE OPTIONS
ifneq ($(filter release, $(MAKECMDGOALS)),)
	#TODO Optimizations. -O2
	CCFLAGS := $(CCFLAGS)
	LDFLAGS := $(LDFLAGS)
	DEFINES := -DNDEBUG $(DEFINES)
	OUTPUT = $(BUILDDIR)/$(BIN)_$(SYSTEM)$(EXT)
	OUTPUTDIR = $(BUILDDIR)/$(SYSTEM).release
else
	CCFLAGS := -g -fno-pie $(CCFLAGS)
	LDFLAGS := -g -fno-pie $(LDFLAGS)
	DEFINES := -DDEBUG $(DEFINES)
	OUTPUT = $(BUILDDIR)/$(BIN)_$(SYSTEM).debug$(EXT)
	OUTPUTDIR = $(BUILDDIR)/$(SYSTEM).debug
endif


ifeq ($(OS),Windows)
	EXT := .exe
	LIBEXT := .dll
	LIBS := $(LIBS) -lmingw32 #-lwinpthread -mwindows -lwinmm
	STATICLIBS := $(STATICLIBS)
	DEFINES := $(DEFINES) -DWINDOWS -DWIN32
	LIBFLAGS := $(LIBFLAGS) -Wl,-out-implib,lib$(NAME)$(LIBEXT).a
else ifeq ($(OS), Mac)
	EXT := 
	LIBEXT := .dylib
	LIBS := $(LIBS) -ldl
	STATICLIBS := $(STATICLIBS)
	DEFINES := $(DEFINES) -DOSX
	LIBFLAGS := $(LIBFLAGS) -dynamiclib -Wl,-dylib-install_name,lib$(NAME)$(LIBEXT)
else #ifeq ($(OS),Linux)
	EXT := 
	LIBEXT := .so
	LIBS := $(LIBS) -ldl
	STATICLIBS := $(STATICLIBS)
	DEFINES := $(DEFINES) -DLINUX
	LIBFLAGS := $(LIBFLAGS) -Wl,-soname,lib$(NAME)$(LIBEXT)
endif


AR = ar
WINDOWS_CC_PREFIX_32 = i686-w64-mingw32
WINDOWS_CC_PREFIX_64 = x86_64-w64-mingw32

ifeq ($(ARCH), x86_64)
	DEFINES := $(DEFINES) -DX86_64
	ifeq ($(OS), Windows)
		CC = $(WINDOWS_CC_PREFIX_64)-gcc
		AR = $(WINDOWS_CC_PREFIX_64)-ar
	else
		CC = gcc -m64
	endif
else ifeq ($(ARCH), x86)
	DEFINES := $(DEFINES) -DX86
	ifeq ($(OS), Windows)
		CC = $(WINDOWS_CC_PREFIX_32)-gcc
		AR = $(WINDOWS_CC_PREFIX_32)-ar
	else
		CC = gcc -m32
	endif
else ifeq ($(ARCH), arm)
	DEFINES := $(DEFINES) -DARM
	ifeq ($(OS), Windows)
	else ifeq ($(OS), Mac)
	else
	endif
endif



#TODO Use this to allow out-of-tree source files.
VPATH += $(SRCDIR)

#SOURCES	:= $(SOURCES)	

OBJECTS	:= $(patsubst $(SRCDIR)/%.cpp,$(OUTPUTDIR)/%.o,$(SOURCES))

DEPENDENCIES = $(OBJECTS:.o=.deps)

all: debug

debug: init $(OUTPUT)

release: init $(OUTPUT)

$(OUTPUT): $(OBJECTS)
	$(CC) $(STATICLIBS) $(LDFLAGS) $(OBJECTS) -o $(OUTPUT) $(LIBS)
	cp $(OUTPUT) $(BIN)$(EXT)

init:
	@mkdir -p $(OUTPUTDIR)
	@for SOURCE in $(SOURCES); do \
		export SRCSUBDIR=`find $$SOURCE -printf '%h\n'`; \
		mkdir -p $(OUTPUTDIR)/$$SRCSUBDIR; \
	done
	@cp -a $(OUTPUTDIR)/$(SRCDIR)/* $(OUTPUTDIR)/
	@rm -rd $(OUTPUTDIR)/$(SRCDIR)

$(OBJECTS) : $(OUTPUTDIR)/%.o: $(SRCDIR)/%.cpp
	$(CC) $(CCFLAGS) $(DEFINES) $< -o $@ $(INCLUDES)

-include $(DEPENDENCIES)

# TODO: CCFLAGS (can't since it has the '-c' compiler option?)
$(DEPENDENCIES): $(OUTPUTDIR)/%.deps: $(SRCDIR)/%.cpp
	@cd $(SRCDIR); export SRCSUBDIR=`find $*.cpp -printf '%h\n'`; cd ../; \
	mkdir -p $(OUTPUTDIR)/$$SRCSUBDIR;
	@export SOURCENAME=`find $< -printf '%f\n' | sed -e 's/.cpp//g'`; \
	$(CC) -std=c++0x -MM -MG $(DEFINES) $< | \
	sed -e "s@$$SOURCENAME.o:@$(OUTPUTDIR)/$*.o $(OUTPUTDIR)/$*.deps:@g" > $@

shared: $(OBJECTS)
	$(CC) $(LDFLAGS) $(LIBFLAGS) -o lib$(NAME)$(LIBEXT) $(OBJECTS)

static: $(OBJECTS)
	if [ $(OS) = "Linux" ] || [ $(OS) = "Mac" ]; then LIBEXT=".a"; fi; \
	$(AR) rcs lib$(NAME)$$LIBEXT $(OBJECTS)


dist: package

package: cleanDebug
	mkdir -p $(PACKAGEDIR)/$(LIBDIR)/
	-@cp -a $(DATADIR) $(PACKAGEDIR)/
	cp -a $(LIBDIR)/* $(PACKAGEDIR)/$(LIBDIR)/
	# For each compiled binary, copy it into the package.
	@for binary in $(shell find $(BUILDDIR) -maxdepth 1 -type f -printf '%f\n'); do \
		echo $$binary | grep Windows; \
		# If it is a Windows binary, copy it into the Windows bin folder. \
		if [ $$? -eq 0 ]; then \
			# Strip the bin name, extension, and build path from the binary. \
			export DEST=`echo $$binary | sed s/$(BIN)_//g | sed s/.exe//g`; \
			cp $(BUILDDIR)/$$binary $(PACKAGEDIR)/$(LIBDIR)/$$DEST/$(BIN).exe; \
			cp $(SCRIPTDIR)/LaunchOnWindows.bat $(PACKAGEDIR)/$(BIN).bat; \
		else \
			cp $(BUILDDIR)/$$binary $(PACKAGEDIR)/; \
			cp $(SCRIPTDIR)/LaunchOnLinux.sh $(PACKAGEDIR)/$(BIN).sh; \
		fi; \
	done
	-@rm $(NAME)_$(VERSION).zip
	-cd $(BUILDDIR)/ && \
	zip -r ../$(NAME)_$(VERSION).zip $(NAME)_$(VERSION)/;



clean:
	-@rm -rf $(BUILDDIR)/$(SYSTEM).debug/ > /dev/null 2>&1
	-@rm $(BUILDDIR)/$(BIN)_$(SYSTEM).debug$(EXT) > /dev/null 2>&1
	-@rm -rf $(BUILDDIR)/$(SYSTEM).release/ > /dev/null 2>&1
	-@rm $(BUILDDIR)/$(BIN)_$(SYSTEM)$(EXT) > /dev/null 2>&1
	-@rmdir $(BUILDDIR)/ > /dev/null 2>&1

cleanDebug:
	-@rm -rf $(BUILDDIR)/*.debug
	-@rm $(BUILDDIR)/*.debug*

# TODO: Rename to distclean?
cleanAll:
	-@rm -r $(BUILDDIR) > /dev/null 2>&1

docs:
	mkdir -p $(DOCDIR)
	(cat Doxyfile ; echo INPUT="$$PWD/$(SRCDIR)") | doxygen -

project:
	$(MAKE) -f $(SCRIPTDIR)/CppProjectBuilder/Makefile $(NAME)



.PHONY: all debug release shared static package dist install uninstall \
		init clean cleanDebug cleanAll docs project


