## THIS FILE HAS BEEN AUTOMATICALLY GENERATED.
## Autogenerated by https://www.github.com/h4tch/CppProjectBuilder
## MIT Licensed. Created by Dan H4tch.
##
## Cross-Platform Makefile for Mac/Linux.
## 
## Cross-Compilation Support:
## 	Supported OS values are: Windows_NT, Windows, Linux, and Darwin (osx).
## 	Supported ARCH values are: x86, x86_64, arm(not implemented).
## 	Note: These will be automatically determined if not set.
## 
## Make Commands:
## 	make - Builds a debug version for the current OS and ARCH.
## 	make debug - same as above.
## 	make release - Builds a release version for the current OS and ARCH.
##	make package - Creates a Zip archive in the build direction of all compiled
##					executables, data assets, and libraries.
##					Note: Removes debug build files.
##	make clean - Remove debug and release builds for current OS and ARCH. 
##	make cleanDebug - Remove debug build files.
##	make cleanAll - Remove the build directory completely.
## 

  
## TODO:
## 	Move OS and ARCH detection to another Makefile that is included.
## http://www.gnu.org/software/make/manual/make.html#Directory-Variables
##	DESTDIR
## 	make dist
## 	make install, prefix, exec-prefix, /usr/local
## 	make uninstall
##	datarootdir, /usr/local/share, architecture independent data
##	datadir, typically same as datarootdir
## 	includedir,	/usr/local/include/ where to install header files 
## 	Ability for user to override variables.
##	Metadata for built packages. Include $$ICON
##	Look into NSIS for a Windows installer. 
##	Add optimization options to compiler for "release" builds.
##	Change OS and ARCH to produce more "friendly" named files?
##		Something like this: game_Linux_32, game_Windows_64, game_Mac_32
## 		Arm would be "_arm32" and "_arm64", not counting the different ABIs.
##	More Platforms: x64, ia32, etc?
##	Basic Test suite.
##		`make test`
##		`make testrun`
##	ERROR out if ARCH is invalid. For OS, default to Linux? Add Unix?
## 	Make the Zip file(s) a target. Each platform has a zip target.
##		The zip needs build/$(SYSTEM).release as a dependency. 
##	Move compiled Linux binary to bin/lib folder.


NAME	= $$NAME
BIN 	= $$FILENAME
VERSION	= $$VERSION
PACKAGEDIR = $(BUILDDIR)/$(NAME)_$(VERSION)
DATA	= $$DATADIR
EXT		= # Set to '.exe' on Windows. I might set to '.bin' for Unixes.
LIBEXT	= .so # Set to '.dll', '.dylib', '.so', or '.a'.
SRC 	= $$SRCDIR
ifeq ($(BUILDDIR),)
	BUILDDIR = $$BUILDDIR
endif
LIBDIR		= $$LIBDIR
THIRDPARTYDIR = $$THIRDPARTYDIR
SYSTEM		= $(OS)_$(ARCH)
CC  		= g++
CCFLAGS		= $$CCFLAGS
LDFLAGS		= $$LDFLAGS
LIBFLAGS	= $$LIBFLAGS
FLAGS_DEBUG = $$FLAGS_DEBUG
FLAGS_RELEASE = $$FLAGS_RELEASE
INCLUDES	= $$INCLUDES
LIBS 		= $$LIBS #+= $(foreach library,$(LIBS),-l$(library))
STATICLIBS 	= $$STATICLIBS
WINLIBS		= $$WINLIBS 
STATICWINLIBS= $$STATICWINLIBS
DEFINES		= -DDATE=$$DATE $$DEFINES
DEFINES_DEBUG = $$DEFINES_DEBUG
DEFINES_RELEASE = $$DEFINES_RELEASE



#OSS 	= "Linux Mac Windows"
#ARCHS	= "arm x86 x86_64"
 

# TODO
SHELL = /bin/sh
INSTALL = install
INSTALL_PROGRAM=INSTALL
INSTALL_DATA = $(INSTALL) -m 644
# install and uninstall rules
DESTDIR = /usr/share/


#### BEGIN SECTION FOR DETECTING AND FIXING UP ARCH ####
# NOTE: WINDOWS ARCH VALUES CAN BE: AMD64 IA64 x86
# If we are on Linux cross-compiling to Windows, use Unix tools to find ARCH.
ifeq ($(ARCH),)
	ifeq ($(PROCESSOR_ARCHITECTURE),)
		ARCH := $(shell uname -m)
	else
		ARCH := PROCESSOR_ARCHITECTURE
	endif
endif

# Better architecture detection on Windows.
ifneq ($(PROCESSOR_ARCHITEW6432),)
	PROCESSOR_ARCHITECTURE = $(PROCESSOR_ARCHITEW6432)
endif

# If not on Windows. Use more advanced methods to fixup ARCH.
ifeq ($(PROCESSOR_ARCHITECTURE),)
	ifneq ($(filter x86_64%,$(ARCH)),)
		ARCH := x86_64
	else ifneq ($(filter %86,$(ARCH)),)
		ARCH := x86
	else ifneq ($(filter %arm,$(ARCH)),)
		ARCH := arm
	else ifneq ($(filter arm%,$(ARCH)),)
		ARCH := arm
	else ifneq ($(filter %ARM,$(ARCH)),)
		ARCH := arm
	else ifneq ($(filter ARM%,$(ARCH)),)
		ARCH := arm
	endif
endif

# Catch other possible ARCH values and correct it. 
#sed 's/x86_//;s/i[3-6]86/x86/'
ifeq ($(ARCH),ia32)
	ARCH := x86
else ifeq ($(ARCH),IA32)
	ARCH := x86
else ifeq ($(ARCH),ia64)
	ARCH := x86_64
else ifeq ($(ARCH),IA64)
	ARCH := x86_64
else ifeq ($(ARCH),amd64)
	ARCH := x86_64
else ifeq ($(ARCH),AMD64)
	ARCH := x86_64
else ifeq ($(ARCH),x64)
	ARCH := x86_64
else ifeq ($(ARCH),ARM)
	ARCH := arm
endif
#### DONE SETTING UP ARCH ####


#### DETECT OS AND SET UP COMPILER AND FLAGS ####
ifeq ($(OS),)
	OS := $(shell uname -s)
endif

ifeq ($(OS),Windows_NT)
	OS := Windows
endif

ifeq ($(OS),Windows)
	EXT 	:= .exe
	LIBEXT 	:= .dll
	LIBS 	:= $(WINLIBS) $(LIBS)
	STATICLIBS += $(STATICWINLIBS)
	DEFINES += $$WINDEFINES
	LIBFLAGS := $(LIBFLAGS) $$LIBFLAGS_WINDOWS
else ifeq ($(OS),Linux)
	DEFINES += $$LINUXDEFINES
	LIBFLAGS := $(LIBFLAGS) $$LIBFLAGS_LINUX
else ifeq ($(OS), Darwin)
	OS = Mac
	LIBEXT := .dylib
	DEFINES += $$MACDEFINES
	LIBFLAGS := $(LIBFLAGS) $$LIBFLAGS_MAC
else
endif

ifeq ($(ARCH),x86_64)
	BITS = 64
	DEFINES += $$DEFINES_64
	ifeq ($(OS), Windows)
		CC = $$WINDOWS_CC_64
		AR = $$WINDOWS_AR_64
	else ifeq ($(OS), Mac)
		CC = $$MAC_CC_64
		AR = $$MAC_AR_64
	else
		CC = $$LINUX_CC_64
		AR = $$LINUX_AR_64
	endif
else ifeq ($(ARCH),x86)
	BITS = 32
	DEFINES += $$DEFINES_32
	ifeq ($(OS), Windows)
		CC = $$WINDOWS_CC_32
		AR = $$WINDOWS_AR_32
	else ifeq ($(OS), Mac)
		CC = $$MAC_CC_32
		AR = $$MAC_AR_32
	else
		CC = $$LINUX_CC_32
		AR = $$LINUX_AR_32
	endif
else ifeq ($(ARCH),arm)
	BITS = 32
	DEFINES += $$DEFINES_ARM
	ifeq ($(OS), Windows)
		CC = $$WINDOWS_CC_ARM
		AR = $$WINDOWS_AR_ARM
	else ifeq ($(OS), Mac)
		CC = $$MAC_CC_ARM
		AR = $$MAC_AR_ARM
	else
		CC = $$LINUX_CC_ARM
		AR = $$LINUX_AR_ARM
	endif
endif
#### DONE SETTING UP VARIABLES AND COMPILER FLAGS ####



## DEBUG AND RELEASE OPTIONS
ifneq ($(filter release, $(MAKECMDGOALS)),)
	CCFLAGS := $(FLAGS_RELEASE) $(CCFLAGS)
	LDFLAGS := $(FLAGS_RELEASE) $(LDFLAGS)
	DEFINES := $(DEFINES_RELEASE) $(DEFINES)
	OUTPUT = $(BUILDDIR)/$(BIN)_$(SYSTEM)$(EXT)
	OUTPUTDIR = $(BUILDDIR)/$(SYSTEM).release
else
	CCFLAGS := $(FLAGS_DEBUG) $(CCFLAGS)
	LDFLAGS := $(FLAGS_DEBUG) $(LDFLAGS)
	DEFINES := $(DEFINES_DEBUG) $(DEFINES)
	OUTPUT = $(BUILDDIR)/$(BIN)_$(SYSTEM).debug$(EXT)
	OUTPUTDIR = $(BUILDDIR)/$(SYSTEM).debug
endif




#TODO Use this to allow out-of-tree source files.
VPATH += $(SRC)

SOURCES	:= $$SOURCES	

OBJECTS	:= $(patsubst $(SRC)/%.cpp,$(OUTPUTDIR)/%.o,$(SOURCES))

DEPENDENCIES = $(OBJECTS:.o=.deps)

all: debug

debug: init $(OUTPUT)

release: init $(OUTPUT)

$(OUTPUT): $(OBJECTS)
	$(CC) $(STATICLIBS) $(LDFLAGS) $(OBJECTS) -o $(OUTPUT) $(LIBS)
	cp $(OUTPUT) $(BIN)$(EXT)

init:
	@mkdir -p $(OUTPUTDIR)
	@for SOURCE in $(SOURCES); do \
		export SRCSUBDIR=`find $$SOURCE -printf '%h\n'`; \
		mkdir -p $(OUTPUTDIR)/$$SRCSUBDIR; \
	done
	@cp -a $(OUTPUTDIR)/$(SRC)/* $(OUTPUTDIR)/
	@rm -rd $(OUTPUTDIR)/$(SRC)

$(OBJECTS) : $(OUTPUTDIR)/%.o: $(SRC)/%.cpp
	$(CC) $(CCFLAGS) $(DEFINES) $< -o $@ $(INCLUDES)

-include $(DEPENDENCIES)

# TODO: CCFLAGS (can't since it has the '-c' compiler option?)
$(DEPENDENCIES): $(OUTPUTDIR)/%.deps: $(SRC)/%.cpp
	@cd $(SRC); export SRCSUBDIR=`find $*.cpp -printf '%h\n'`; cd ../; \
	mkdir -p $(OUTPUTDIR)/$$SRCSUBDIR;
	@export SOURCENAME=`find $< -printf '%f\n' | sed -e 's/.cpp//g'`; \
	$(CC) -std=c++0x -MM -MG $(DEFINES) $< | \
	sed -e "s@$$SOURCENAME.o:@$(OUTPUTDIR)/$*.o $(OUTPUTDIR)/$*.deps:@g" > $@

shared: $(OBJECTS)
	$(CC) $(LDFLAGS) $(LIBFLAGS) -o lib$(NAME)$(LIBEXT) $(OBJECTS)

static: $(OBJECTS)
	if [ $(OS) = "Linux" ] || [ $(OS) = "Mac" ]; then LIBEXT=".a"; fi; \
	$(AR) rcs lib$(NAME)$$LIBEXT $(OBJECTS)


dist: package

package: cleanDebug
	mkdir -p $(PACKAGEDIR)/$(LIBDIR)/
	-@cp -a $(DATA) $(PACKAGEDIR)/
	cp -a $(LIBDIR)/* $(PACKAGEDIR)/$(LIBDIR)/
	# For each compiled binary, copy it into the package.
	@for binary in $(shell find $(BUILDDIR) -maxdepth 1 -type f -printf '%f\n'); do \
		echo $$binary | grep Windows; \
		# If it is a Windows binary, copy it into the Windows bin folder. \
		if [ $$? -eq 0 ]; then \
			# Strip the bin name, extension, and build path from the binary. \
			export DEST=`echo $$binary | sed s/$(BIN)_//g | sed s/.exe//g`; \
			cp $(BUILDDIR)/$$binary $(PACKAGEDIR)/$(LIBDIR)/$$DEST/$(BIN).exe; \
			cp $$SCRIPTDIR/LaunchOnWindows.bat $(PACKAGEDIR)/$(BIN).bat; \
		else \
			cp $(BUILDDIR)/$$binary $(PACKAGEDIR)/; \
			cp $$SCRIPTDIR/LaunchOnLinux.sh $(PACKAGEDIR)/$(BIN).sh; \
		fi; \
	done
	-@rm $(NAME)_$(VERSION).zip
	-cd $(BUILDDIR)/ && \
	zip -r ../$(NAME)_$(VERSION).zip $(NAME)_$(VERSION)/;



clean:
	-@rm -rf $(BUILDDIR)/$(SYSTEM).debug/ > /dev/null 2>&1
	-@rm $(BUILDDIR)/$(BIN)_$(SYSTEM).debug$(EXT) > /dev/null 2>&1
	-@rm -rf $(BUILDDIR)/$(SYSTEM).release/ > /dev/null 2>&1
	-@rm $(BUILDDIR)/$(BIN)_$(SYSTEM)$(EXT) > /dev/null 2>&1
	-@rmdir $(BUILDDIR)/ > /dev/null 2>&1

cleanDebug:
	-@rm -rf $(BUILDDIR)/*.debug
	-@rm $(BUILDDIR)/*.debug*

# TODO: Rename to distclean?
cleanAll:
	-@rm -r $(BUILDDIR) > /dev/null 2>&1

docs:
	mkdir -p $$DOCDIR
	(cat Doxyfile ; echo INPUT="$$PWD/$(SRC)") | doxygen -


.PHONY: all
.PHONY: debug
.PHONY: release
.PHONY: shared
.PHONY: static
.PHONY: package
.PHONY: packageLinux
.PHONY: packageWindows
.PHONY: dist
.PHONY: init
.PHONY: install
.PHONY: uninstall
.PHONY: clean
.PHONY: cleanDebug
.PHONY: cleanAll



