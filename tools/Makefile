## Monster Build System  -  https://www.github.com/h4tch/MonsterBS
## MIT Licensed 2014-2016
## Created by: Daniel Hatch <h4tch.github.com>
##
## Project Makefile.
## Autogenerated from and depends on '$$NAME.mk' project description file.
##
## Cross-Compilation environment variables supported:
## 	OS: Windows, Linux, and Mac/Darwin. Defaults to HOST_OS. Fallbacks to Linux.
## 	ARCH: x86, x86_64, arm(todo). Defaults to HOST_ARCH.
##
## Makefile targets:
## 	debug - Default. Builds a debug version for the current OS and ARCH.
## 	release - Builds a release version for the current OS and ARCH.
##	test - Compiles the test suite.
##	package - Creates a Zip archive in the build directory of all compiled
##				release executables, data assets, and libraries.
##				Note: Removes debug build files.
##	clean - Remove all builds for current OS and ARCH. 
##	cleanDebug - Remove debug build files.
##	distclean - Remove the build directory completely.
##	docs - Generate documentation of your source code.
##	project - Re-generates project files based $$NAME.mk's variables.
##

include $$NAME.mk

DEPENDENCIES = $$DEPENDENCIES
BIN = $(FILENAME)
PACKAGEDIR = $(BUILDDIR)/$(NAME)_$(VERSION)
DEFINES += -DCOMPILE_DATE=$$DATE


SYSTEM = $(OS)_$(ARCH)

#### DETECT OS AND ARCH ####
ifeq ($(PROCESSOR_ARCHITECTURE),)
	HOST_OS = $(shell uname -s)
	HOST_ARCH = $(shell uname -m)
else
	# Possible Windows ARCH Values: AMD64 IA64 x86
	ifneq ($(PROCESSOR_ARCHITEW6432),)
		PROCESSOR_ARCHITECTURE = $(PROCESSOR_ARCHITEW6432)
	endif
	HOST_OS = Windows
	HOST_ARCH := PROCESSOR_ARCHITECTURE
	ifeq ($(HOST_ARCH),IA64)
		HOST_ARCH := x86_64
	else ifeq ($(HOST_ARCH),AMD64)
		HOST_ARCH := x86_64
	endif
	ifeq ($(OS),Windows_NT)
		OS := Windows
	endif
endif

ifeq ($(OS),)
	OS := $(HOST_OS)
endif

ifeq ($(OS), Windows)
else ifeq ($(OS), Darwin)
	OS = Mac
else # Unix
	OS = Linux
endif

ifeq ($(ARCH),)
	ARCH := $(HOST_ARCH)
endif

# If not on Windows use `filter` command to detect approximate ARCH
ifneq ($(HOST_OS),Windows)
	ifneq ($(filter %64%,$(ARCH)),)
		ARCH := x86_64
	else ifneq ($(filter %32,$(ARCH)),)
		ARCH := x86
	else ifneq ($(filter %86,$(ARCH)),)
		ARCH := x86
	else ifneq ($(filter %arm,$(ARCH)),)
		ARCH := arm
	else ifneq ($(filter arm%,$(ARCH)),)
		ARCH := arm
	else ifneq ($(filter %ARM,$(ARCH)),)
		ARCH := arm
	else ifneq ($(filter ARM%,$(ARCH)),)
		ARCH := arm
	endif
endif
ifeq ($(ARCH),AMD64)
	ARCH := x86_64
else ifeq ($(ARCH),IA64)
	ARCH := x86_64
endif
#### DONE SETTING UP OS AND ARCH ####


## Setup Profiles
## For each build profile, if it is a MAKE cli argument, call the profile function
## If release or debug is not specified, it defaults to a debug build
## Profiles for the OS and ARCH are also invoked
define MIXIN_PROFILE
	ifneq ($(filter $(1),$(MAKECMDGOALS)),)
		$(shell echo $(1) | tr a-z A-Z)_BUILD := 1
		$(call $(shell echo $(1) | tr a-z A-Z)_PROFILE)
	endif
endef

define SETUP
	$(foreach PROFILE,$(PROFILES), $(eval $(call MIXIN_PROFILE,$(PROFILE))))
	ifneq ($(RELEASE_BUILD),1)
		ifneq ($(DEBUG_BUILD),1)
			DEBUG_BUILD=1
			$(call DEBUG_PROFILE)
		endif
	endif
	$(eval $(call $(shell echo $(OS) | tr a-z A-Z)_PROFILE))
	$(eval $(call $(shell echo $(ARCH) | tr a-z A-Z)_PROFILE))
endef #SETUP
$(eval $(call SETUP))


OUTPUT = $(BUILDDIR)/$(BIN)_$(SYSTEM)$(APPEND)$(EXT)
OUTPUTDIR = $(BUILDDIR)/$(SYSTEM)$(APPEND)
LIBOUTPUT = lib$(NAME)$(APPEND)
LIBOUTPUTDIR = $(LIBDIR)/$(SYSTEM)/


OBJECTS	:= $(patsubst %.cpp,$(OUTPUTDIR)/%.o,$(SOURCES))

SRCDEPS = $(OBJECTS:.o=.deps)

all: $$DEFAULT_BUILD_RULE

$(OUTPUT): init dependencies $(OBJECTS)
	$(CXX) $(STATICLIBS) $(LDFLAGS) $(OBJECTS) -o $(OUTPUT) $(LIBS)
	cp $(OUTPUT) $(BIN)$(EXT)

debug: all

release: all

test: $(OUTPUT)

## Initialize output directories
init:
	@mkdir -p $(OUTPUTDIR)
	@for SOURCE in $(SOURCES); do \
		export SRCSUBDIR=`dirname $$SOURCE`; \
		mkdir -p $(OUTPUTDIR)/$$SRCSUBDIR; \
	done

## Build dependencies of this project within the same framework
## Compiles in RELEASE mode, and installs headers into framework's path
dependencies:
	@for DEPENDENCY in $(DEPENDENCIES); do \
		echo "Building Dependency: $$DEPENDENCY";\
		$(MAKE) -C $(FRAMEWORK_PATH)/$(SRCDIR)/$$DEPENDENCY release $(MAKECMDGOALS) headers; \
		$(MAKE) -C $(FRAMEWORK_PATH)/$(SRCDIR)/$$DEPENDENCY release $(MAKECMDGOALS) shared; \
	done

## Compile CPP files into object files in the output directory
$(OBJECTS): $(OUTPUTDIR)/%.o: %.cpp
	$(CXX) $(CXXFLAGS) $(DEFINES) $< -o $@ $(INCLUDES)

## For each source, create a MAKE rule that makes it dependent on its included headers
## This allows partial recompilation when a source's dependency is updated
## WARNING: If a dependent file is not found anywhere in any of the paths,
##   MAKE will terminate early without reporting any errors
-include $(SRCDEPS)

## Generates dependencies of each source and writes them into a '.deps' file in the output directory
$(SRCDEPS): $(OUTPUTDIR)/%.deps: %.cpp
	@export SRCSUBDIR=`dirname $*.cpp`; \
	mkdir -p $(OUTPUTDIR)/$$SRCSUBDIR;
	@export SOURCENAME=`basename $< | sed -e 's/.cpp//g'`; \
	$(CXX) -std=c++11 -MM -MG $(DEFINES) $< | \
	sed -e "s@$$SOURCENAME.o:@$(OUTPUTDIR)/$*.o $(OUTPUTDIR)/$*.deps:@g" > $@

## Combine compiled objects into a dynamic shared library (so, dll, dylib)
shared: init dependencies $(OBJECTS)
	mkdir -p $(LIBOUTPUTDIR)
	$(CXX) $(STATICLIBS) $(LIBS) $(LDFLAGS) $(LIBFLAGS) -o $(LIBOUTPUTDIR)/$(LIBOUTPUT)$(LIBEXT) $(OBJECTS)
	-@if [ "$(RELEASE_BUILD)" = "1" ]; then \
		echo "Installing shared library into '$(FRAMEWORK_PATH)/$(LIBDIR)/$(SYSTEM)'"; \
		cp $(LIBOUTPUTDIR)/$(LIBOUTPUT)$(LIBEXT) $(FRAMEWORK_PATH)/$(LIBDIR)/$(SYSTEM)/; \
	fi

## Combine compiled objects into a static archive (a, lib)
static: init dependencies $(OBJECTS)
	mkdir -p $(LIBOUTPUTDIR)
	$(AR) rcs $(LIBOUTPUTDIR)/$(LIBOUTPUT)$(LIBEXTSTATIC) $(OBJECTS)
	-@if [ "$(RELEASE_BUILD)" = "1" ]; then \
		echo "Installing static library into '$(FRAMEWORK_PATH)/$(LIBDIR)/$(SYSTEM)'"; \
		cp $(LIBOUTPUTDIR)/$(LIBOUTPUT)$(LIBEXTSTATIC) $(FRAMEWORK_PATH)/$(LIBDIR)/$(SYSTEM)/; \
	fi

## Aggregate project's source headers and install into the framework's path
headers: init $(HEADERS)
	mkdir -p $(FRAMEWORK_PATH)/$(INCLUDEDIR)/$(FRAMEWORK)/$(NAME)
	cp -a $(INCLUDEDIR)/* $(FRAMEWORK_PATH)/$(INCLUDEDIR)/$(FRAMEWORK)/$(NAME)

dist: package

## Create a Zip of all the current builds, with platforms specific scripts
package: cleanDebug
	mkdir -p $(PACKAGEDIR)/$(LIBDIR)/
	-@cp -a $(DATADIR) $(PACKAGEDIR)/
	cp -a $(LIBDIR)/* $(PACKAGEDIR)/$(LIBDIR)/
	# For each compiled binary, copy it into the package.
	@for binary in $(shell find $(BUILDDIR) -maxdepth 1 -type f -print0 | xargs -0 basename $1); do \
		echo $$binary | grep Windows; \
		# On Windows, the binary is copied into the Windows bin/lib folder. \
		if [ $$? -eq 0 ]; then \
			cp $(BUILDDIR)/$$binary $(PACKAGEDIR)/$(LIBDIR)/$(SYSTEM)/$(BIN).exe; \
			cp $(SCRIPTDIR)/LaunchOnWindows.bat $(PACKAGEDIR)/$(BIN).bat; \
		fi \
		echo $$binary | grep Linux; \
		if [ $$? -eq 0 ]; then \
			cp $(BUILDDIR)/$$binary $(PACKAGEDIR)/$(BIN); \
			cp $(SCRIPTDIR)/LaunchOnLinux.sh $(PACKAGEDIR)/$(BIN).sh; \
		fi \
		echo $$binary | grep Mac; \
		if [ $$? -eq 0 ]; then \
			cp $(BUILDDIR)/$$binary $(PACKAGEDIR)/$(BIN); \
			cp $(SCRIPTDIR)/LaunchOnMac.sh $(PACKAGEDIR)/$(BIN).sh; \
		fi \
	done
	-@rm $(NAME)_$(VERSION).zip
	-cd $(BUILDDIR)/ && \
	zip -r ../$(NAME)_$(VERSION).zip $(NAME)_$(VERSION)/;

## 
clean:
	-@rm -rf $(BUILDDIR)/$(SYSTEM).debug/ > /dev/null 2>&1
	-@rm $(BUILDDIR)/$(BIN)_$(SYSTEM).debug$(EXT) > /dev/null 2>&1
	-@rm -rf $(BUILDDIR)/$(SYSTEM).release/ > /dev/null 2>&1
	-@rm $(BUILDDIR)/$(BIN)_$(SYSTEM)$(EXT) > /dev/null 2>&1
	-@rmdir $(BUILDDIR)/ > /dev/null 2>&1

## Remove DEBUG related build files
cleanDebug:
	-@rm -rf $(BUILDDIR)/*.debug
	-@rm $(BUILDDIR)/*.debug*

## Remove the build directory
distclean:
	-@rm -r $(BUILDDIR) > /dev/null 2>&1

## Generate documentation using Doxygen
docs:
	cat Doxyfile | doxygen -

## Regenerates build files and scripts (including this makefile) using MonsterBS
project:
	@$(MAKE) -f $(MONSTERBS_PATH)/Makefile $(NAME)

## List of rules that aren't file targets
.PHONY: all debug release shared static package headers dist install \
	uninstall init clean distclean cleanDebug docs project

# Allows the user to query variable values
#   'make print-VARIABLE'
print-%: ; @echo $*=$($*)

